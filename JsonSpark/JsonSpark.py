#!/usr/bin/env python3
"""
JsonSpark.py
–†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ —Ñ–∞–π–ª—ã –∏–∑ JsonSpec.json
–≤ —Ä–µ–∞–ª—å–Ω—É—é —Ñ–∞–π–ª–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞.

‚Ä¢ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:
    <project-root>/
        JsonSpark/
            JsonSpark.py
            JsonSpec.json   ‚Üê —Å—é–¥–∞ –∫–æ–ø–∏—Ä—É–µ—Ç–µ JSON –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
‚Ä¢ –°–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞—ë—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª—ã –≤ <project-root>/design, api, infra –∏ —Ç.–¥.
"""

from pathlib import Path
import json

# —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–ª—é—á JSON ‚Üí –ø—É—Ç—å —Ñ–∞–π–ª–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
MAPPING = {
    "tokens_json":      "design/tokens.json",
    "grid_breakpoints": "design/grid_breakpoints.md",
    "brand_guidelines": "branding/brand_guidelines.md",
    "content_examples": "content/examples.md",
    "openapi_yaml":     "api/openapi.yaml",
    "docker_compose":   "infra/docker-compose.yml",
    "env_example":      "env.example",
    "seed_data":        "data/seed/sample_seed.json",
}

def write_file(root: Path, rel_path: str, content: str) -> None:
    path = root / rel_path
    path.parent.mkdir(parents=True, exist_ok=True)
    action = "–û–±–Ω–æ–≤–ª–µ–Ω–æ" if path.exists() else "–°–æ–∑–¥–∞–Ω–æ "
    path.write_text(content, encoding="utf-8")
    print(f"  {action}: {rel_path}")

def process_section(section: dict, root: Path) -> None:
    for key, val in section.items():
        if key in MAPPING and isinstance(val, str):
            write_file(root, MAPPING[key], val)

def main() -> None:
    script_dir = Path(__file__).resolve().parent           # .../JsonSpark
    root_dir   = script_dir.parent                         # –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
    spec_path  = script_dir / "JsonSpec.json"              # —Ç–µ–ø–µ—Ä—å JSON –ª–µ–∂–∏—Ç —Ä—è–¥–æ–º —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º

    if not spec_path.exists():
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω {spec_path}. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ JsonSpec.json —Ä—è–¥–æ–º —Å JsonSpark.py.")
        return

    try:
        spec = json.loads(spec_path.read_text(encoding="utf-8"))
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ JSON: {e}")
        return

    print(f"üìÇ –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞: {root_dir}\n")

    for sec in ("design", "product", "backend"):
        if isinstance(spec.get(sec), dict):
            process_section(spec[sec], root_dir)

    print("\n‚úÖ –ì–æ—Ç–æ–≤–æ! –§–∞–π–ª—ã —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")

if __name__ == "__main__":
    main()
